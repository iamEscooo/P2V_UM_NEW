
check_P2V_user.ps1:15:Function check_P2V_user 
check_userprofile.ps1:12:Function check_userprofile 
Get_filename.ps1:3:Function Get-FileName($initialDirectory)
P2V_calculate_groups - SEC2.ps1:36:Function P2V_calculate_tmp_groups
get_ps_users_and_groups.ps1:19:# Function to invoke interactive login via browser
get_ps_users_and_groups.ps1:20:Function Get-PlanningSpaceAuthToken ($tenantUrl)
get_ps_users_and_groups.ps1:51:# Function to validate working directory
get_ps_users_and_groups.ps1:52:Function Validate-WorkingDirectory($workingDir)
get_ps_users_and_groups.ps1:63:# Function to delete existing CSV files
get_ps_users_and_groups.ps1:64:Function Delete-ExistingCsvFiles($workgroupsFile, $usersFile, $userWorkgroupsFile)
get_ps_users_and_groups.ps1:80:# Function to get all PlanningSpace workgroups
get_ps_users_and_groups.ps1:81:Function Get-PlanningSpaceWorkgroups($tenantUrl, $token)
get_ps_users_and_groups.ps1:88:# Function to get all PlanningSpace Windows AD users
get_ps_users_and_groups.ps1:89:Function Get-PlanningSpaceWindowsADUsers($tenantUrl, $token)
get_ps_users_and_groups.ps1:97:# Function to save PlanningSpace workgroups to CSV file
get_ps_users_and_groups.ps1:98:Function Save-WorkgroupsToCsv($workgroups, $workgroupsFile)
get_ps_users_and_groups.ps1:105:# Function to save PlanningSapce users and user workgroups to CSV files
get_ps_users_and_groups.ps1:106:Function Save-UserAndUserWorkgroupsToCsv($users, $usersFile, $workgroupsFile)
mytest.ps1:2:Function P2V_update_user ($tenant , $user_profile , $changes)
mytest.ps1:3:{ # function to update existing user in P2V_tenant
mytest.ps1:10:  "in function"
get_ps_users_and_groups_orig.ps1:19:# Function to invoke interactive login via browser
get_ps_users_and_groups_orig.ps1:20:Function Get-PlanningSpaceAuthToken ($tenantUrl)
get_ps_users_and_groups_orig.ps1:51:# Function to validate working directory
get_ps_users_and_groups_orig.ps1:52:Function Validate-WorkingDirectory($workingDir)
get_ps_users_and_groups_orig.ps1:63:# Function to delete existing CSV files
get_ps_users_and_groups_orig.ps1:64:Function Delete-ExistingCsvFiles($workgroupsFile, $usersFile, $userWorkgroupsFile)
get_ps_users_and_groups_orig.ps1:80:# Function to get all PlanningSpace workgroups
get_ps_users_and_groups_orig.ps1:81:Function Get-PlanningSpaceWorkgroups($tenantUrl, $token)
get_ps_users_and_groups_orig.ps1:88:# Function to get all PlanningSpace Windows AD users
get_ps_users_and_groups_orig.ps1:89:Function Get-PlanningSpaceWindowsADUsers($tenantUrl, $token)
get_ps_users_and_groups_orig.ps1:97:# Function to save PlanningSpace workgroups to CSV file
get_ps_users_and_groups_orig.ps1:98:Function Save-WorkgroupsToCsv($workgroups, $workgroupsFile)
get_ps_users_and_groups_orig.ps1:105:# Function to save PlanningSapce users and user workgroups to CSV files
get_ps_users_and_groups_orig.ps1:106:Function Save-UserAndUserWorkgroupsToCsv($users, $usersFile, $workgroupsFile)
P2V_calculate_groups_bd - SEC2.ps1:36:Function P2V_calculate_groups_bd
P2V_calculate_groups_bd - SEC2.ps1:195:			  $bd_base = $bd_base -or $false # no function ;-) 
P2V_calculate_groups.ps1:36:Function P2V_calculate_tmp_groups
P2V_calculate_groups_bd.ps1:36:Function P2V_calculate_groups_bd
P2V_calculate_groups_bd.ps1:194:			  $bd_base = $bd_base -or $false # no function ;-) 
P2V_calculate_groups_dependencies - SEC2.ps1:8:Function P2V_calculate_groups_dependencies
P2V_calculate_groups_dependencies.ps1:8:Function P2V_calculate_groups_dependencies
P2V_lib1.ps1:99:#====  Active Directory functions               ====
P2V_lib1.ps1:103:Function get_AD_user
P2V_lib1.ps1:104:{ # function to verify and select user  via GUI 
P2V_lib1.ps1:171:Function get_AD_userlist($ad_group, ) # NOT YET TESTED
P2V_lib1.ps1:195:#====  Planningspace functions                  ====
P2V_lib1.ps1:199:Function select_PS_tenants() # NOT YET TESTED
P2V_lib1.ps1:231:Function get_PS_userlist($tenant)
P2V_lib1.ps1:244:Function get_PS_grouplist($tenant)
P2V_lib1.ps1:249:Function get_PS_user_groups($tenant,$user_id)
P2V_lib1.ps1:253:Function add_PS_user ($tenant, $user_profile)
P2V_lib1.ps1:254:{# function to add 1 user to P2V_tenant
P2V_lib1.ps1:273:Function update_PS_user ($tenant, $user_profile_old, $user_profile_new)
P2V_lib1.ps1:278:Function deactivate_PS_user {$tenant,$user_id}
P2V_forms.ps1:46:Function  ask_continue 
P2V_forms.ps1:59:Function  ask_YesNoAll_alternative
P2V_forms.ps1:81:Function  ask_YesNoAll
P2V_forms.ps1:179:Function get_AD_user_GUI 
P2Vinclude2_0.ps1:44:#==   User/Workgroup functions                    ==
P2Vinclude2_0.ps1:49:function GetUsersFromPS
P2Vinclude2_0.ps1:50:function GetWorkgroupsFromPS
P2Vinclude2_0.ps1:55:function GetUsersFromAD
P2Vinclude2_0.ps1:56:function GetWorkgroupsFromAD
P2Vinclude2_0.ps1:62:function GetUsersFromCsv
P2Vinclude2_0.ps1:63:function GetWorkgroupsFromCsv
P2Vinclude2_0.ps1:68:function SelectTenant
P2Vinclude2_0.ps1:69:function SelectUser
P2Vinclude2_0.ps1:70:function 
P2V_export_AD_users.ps1:9:Function P2V_export_AD_users
P2V_include_Planningspace.ps1:6:function
P2V_export_users.ps1:8:Function P2V_export_users
P2V_include.ps1:5:#  general P2V functions for usermgmt
P2V_include.ps1:70:#====  Active Directory functions               ====
P2V_include.ps1:74:Function get_AD_user
P2V_include.ps1:75:{ # function to verify and select user  via GUI 
P2V_include.ps1:177:Function get_AD_userlist 
P2V_include.ps1:207:Function get_userprofilesFromCsv
P2V_include.ps1:243:#====  Planningspace functions                  ====
P2V_include.ps1:247:Function select_PS_tenants ([bool] $multiple=$true, [bool] $all=$false)# ok
P2V_include.ps1:285:Function get_PS_userlist($tenant)
P2V_include.ps1:299:Function get_PS_grouplist($tenant)
P2V_include.ps1:314:Function get_PS_rolelist($tenant)
P2V_include.ps1:330:Function get_PS_user_groups   ($tenant,$user_id)
P2V_include.ps1:348:Function add_PS_user ($tenant, $user_profile)
P2V_include.ps1:349:{# function to add 1 user to P2V_tenant
P2V_include.ps1:369:Function update_PS_user ($tenant, $user_profile_old, $user_profile_new)
P2V_include.ps1:370:{ #  function to update existing user in P2V_tenant
P2V_include.ps1:485:Function update_PS_workgroup ($tenant, $group_profile_old, $group_profile_new)
P2V_include.ps1:486:{ #  function to update existing user in P2V_tenant
P2V_include.ps1:603:Function set_PS_user_status ($tenant,$uid,[bool]$deactivate=$false,[bool]$lock=$false,[bool]$verbose=$false)
P2V_include.ps1:658:Function activate_PS_user ($tenant,$User_Id)
P2V_include.ps1:684:Function deactivate_PS_user ($tenant,$User_Id)
P2V_include.ps1:712:Function get_PS_user ($tenant,$logOnId)
P2V_include.ps1:727:Function PS_user_clear_all_workgroups ($tenant,$logonID,[bool]$verbose=$false)
P2V_include.ps1:792:Function get_profiles ([bool] $debug=$false, [String] $ProfileDef=$profile_file)
P2V_include.ps1:811:Function check_datagroup_dependencies ( [System.Collections.ArrayList] $grouplist,[bool] $debug=$false)
P2V_include.ps1:910:Function check_BD_dependencies ( $login,[System.Collections.ArrayList] $grouplist,[bool] $debug=$true)
P2V_include.ps1:997:Function check_license_dependencies ( [System.Collections.ArrayList] $grouplist,[bool] $debug=$false)
P2V_include.ps1:1036:Function check_template_dependencies ( [System.Collections.ArrayList] $grouplist,[bool] $debug=$false)
P2V_include.ps1:1132:Function write_result     # ($result_list)
P2V_include.ps1:1151:#====  "AUCERNA script"  functions              ====
P2V_include.ps1:1154:# Function to validate working directory
P2V_include.ps1:1155:Function Validate-WorkingDirectory($workingDir_l)
P2V_include.ps1:1166:# Function to validate CSV files
P2V_include.ps1:1167:Function Validate-CsvFile($checkfile)
P2V_include.ps1:1178:# Function to get users from CSV file
P2V_include.ps1:1179:Function Get-UsersFromCsv($usersFile)
P2V_include.ps1:1186:# Function to get user workgroups from CSV file
P2V_include.ps1:1187:Function Get-UserWorkgroupsFromCsv($userWorkgroupsFile)
P2V_include.ps1:1196:#====  "OLD"  function                          ====
P2V_include.ps1:1199:Function P2V_layout() ## DELETE   ?!?!!
P2V_include.ps1:1206:Function P2V_header()
P2V_include.ps1:1240:Function P2V_footer
P2V_include.ps1:1254:Function P2V_Show-Menu              #( -> GUI???)
P2V_include.ps1:1274:Function P2V_Show-Menu_GUI            #( -> GUI???
P2V_include.ps1:1295:Function Delete-ExistingFile([string]$file,[bool]$verbose=$false)
P2V_include.ps1:1296:{ # Function to delete existing files
P2V_include.ps1:1309:Function createdir_ifnotexists ([string]$check_path,[bool]$verbose=$false)
P2V_include.ps1:1310:{ # Function to create non-existing directories
P2V_include.ps1:1322:Function P2V_print_object($object)   ## (OK)
P2V_include.ps1:1323:{ # function to print P2V objects (e.g. user-profile)
P2V_include.ps1:1333:Function P2V_get_tenant($tenantfile)
P2V_include.ps1:1334:{ # function to select tenant (commandline - ascii)
P2V_include.ps1:1368:Function P2V_get_tenant_UI($tenantfile)
P2V_include.ps1:1389:Function P2V_get_userlist($tenant)
P2V_include.ps1:1390:{ # function to retrieve P2V userlist
P2V_include.ps1:1400:Function P2V_get_AD_user($u_xkey)
P2V_include.ps1:1401:{ # function to verify and request user
P2V_include.ps1:1427:Function P2V_get_AD_user_UI()
P2V_include.ps1:1428:{ # function to verify and select user  via GUI 
P2V_include.ps1:1488:Function P2V_AD_userprofile($u_xkey) ##  CHECK - needed ?
P2V_include.ps1:1496:Function P2V_get_P2V_user_UI($t_sel)
P2V_include.ps1:1525:Function P2V_get_WG_UI($t_sel)
P2V_include.ps1:1552:# Function to invoke interactive login via browser
P2V_include.ps1:1553:Function Get-PlanningSpaceAuthToken ($tenantUrl)
P2V_include.ps1:1586:Function Get-FileName($initialDirectory)
P2V_include.ps1:1587:{ #Function to get filename
P2V_include.ps1:1597:Function Write-Log([string]$logtext, [int]$level=0)
P2V_include.ps1:1608:Function show_progress ([int]$i=0 )
P2V_super_sync.ps1:4:Function P2V_super_sync
P2V_set_profiles.ps1:30:Function P2V_set_profiles
P2V_update_groups.ps1:18:Function Get-FileName($initialDirectory)
P2V_update_groups.ps1:19:{ #Function to get filename
P2V_update_groups.ps1:29:# Function to validate working directory
P2V_update_groups.ps1:30:Function Validate-WorkingDirectory($workingDir_l)
P2V_update_groups.ps1:41:# Function to validate CSV files
P2V_update_groups.ps1:42:Function Validate-CsvFile($checkfile)
P2V_update_groups.ps1:53:# Function to get all PlanningSpace workgroups
P2V_update_groups.ps1:54:Function Get-PlanningSpaceWorkgroups($tenantUrl, $token)
P2V_update_groups.ps1:61:# Function to get all PlanningSpace Windows AD users
P2V_update_groups.ps1:62:Function Get-PlanningSpaceWindowsADUsers($tenantUrl, $token)
P2V_update_groups.ps1:70:# Function to get workgroups from CSV file
P2V_update_groups.ps1:71:Function Get-WorkgroupsFromCsv($workgroupsFile)
P2V_update_groups.ps1:78:# Function to get users from CSV file
P2V_update_groups.ps1:79:Function Get-UsersFromCsv($usersFile)
P2V_update_groups.ps1:86:# Function to get user workgroups from CSV file
P2V_update_groups.ps1:87:Function Get-UserWorkgroupsFromCsv($userWorkgroupsFile)
P2V_update_groups.ps1:94:# Function that does the main processing for users
P2V_update_groups.ps1:95:Function Process-Users($usersFromCsv, $currentUsers, $analyzeOnly, $tenant)
P2V_update_groups.ps1:223:# Function that does the main processing for workgroups
P2V_update_groups.ps1:224:Function Process-Workgroups($workgroupsFromCsv, $currentWorkgroups, $analyzeOnly, $tenant)
P2V_update_groups.ps1:344:# Function that does the main processing for user workgroups
P2V_update_groups.ps1:345:Function Process-UserWorkgroups($userWorkgroupsFromCsv, $currentWorkgroups, $currentUsers, $analyzeOnly, $tenantUrl)
P2V_super_sync-SEC2-AD.ps1:58:function f_super_sync_AD 
WPFMessagebox.ps1:1:Function P2V-WPFMessageBox {
WPFMessagebox.ps1:290:    # Custom function to add a button
WPFMessagebox.ps1:291:    Function Add-Button {
P2V_update_users.ps1:24:# Function that does the main processing for users
P2V_update_users.ps1:25:Function Process-Users($usersFromCsv, $currentUsers, $analyzeOnly, $tenant)
P2V_update_users.ps1:207:# Function that does the main processing for workgroups
P2V_update_users.ps1:208:Function Process-Workgroups($workgroupsFromCsv, $currentWorkgroups, $analyzeOnly, $tenantUrl)
P2V_update_users.ps1:301:# Function that does the main processing for user workgroups
P2V_update_users.ps1:302:Function Process-UserWorkgroups($userWorkgroupsFromCsv, $currentWorkgroups, $currentUsers, $analyzeOnly, $tenant)
P2V_update_local_users.ps1:18:Function Get-FileName($initialDirectory)
P2V_update_local_users.ps1:19:{ #Function to get filename
P2V_update_local_users.ps1:29:# Function to validate working directory
P2V_update_local_users.ps1:30:Function Validate-WorkingDirectory($workingDir_l)
P2V_update_local_users.ps1:41:# Function to validate CSV files
P2V_update_local_users.ps1:42:Function Validate-CsvFile($checkfile)
P2V_update_local_users.ps1:53:# Function to get all PlanningSpace workgroups
P2V_update_local_users.ps1:54:Function Get-PlanningSpaceWorkgroups($tenantUrl, $token)
P2V_update_local_users.ps1:61:# Function to get all PlanningSpace Windows AD users
P2V_update_local_users.ps1:62:Function Get-PlanningSpaceUsers($tenantUrl, $token)
P2V_update_local_users.ps1:70:# Function to get workgroups from CSV file
P2V_update_local_users.ps1:71:Function Get-WorkgroupsFromCsv($workgroupsFile)
P2V_update_local_users.ps1:78:# Function to get users from CSV file
P2V_update_local_users.ps1:79:Function Get-UsersFromCsv($usersFile)
P2V_update_local_users.ps1:86:# Function to get user workgroups from CSV file
P2V_update_local_users.ps1:87:Function Get-UserWorkgroupsFromCsv($userWorkgroupsFile)
P2V_update_local_users.ps1:94:# Function that does the main processing for users
P2V_update_local_users.ps1:95:Function Process-Users($usersFromCsv, $currentUsers, $analyzeOnly, $tenant)
P2V_update_local_users.ps1:253:# Function that does the main processing for workgroups
P2V_update_local_users.ps1:254:Function Process-Workgroups($workgroupsFromCsv, $currentWorkgroups, $analyzeOnly, $tenant)
P2V_update_local_users.ps1:374:# Function that does the main processing for user workgroups
P2V_update_local_users.ps1:375:Function Process-UserWorkgroups($userWorkgroupsFromCsv, $currentWorkgroups, $currentUsers, $analyzeOnly, $tenantUrl)
update_ps_users_and_groups.ps1:18:Function Get-FileName($initialDirectory)
update_ps_users_and_groups.ps1:19:{ #Function to get filename
update_ps_users_and_groups.ps1:29:# Function to invoke interactive login via browser
update_ps_users_and_groups.ps1:30:Function Get-PlanningSpaceAuthToken ($tenantUrl)
update_ps_users_and_groups.ps1:61:# Function to validate working directory
update_ps_users_and_groups.ps1:62:Function Validate-WorkingDirectory($workingDir_l)
update_ps_users_and_groups.ps1:73:# Function to validate CSV files
update_ps_users_and_groups.ps1:74:Function Validate-CsvFiles($workgroupsFile, $usersFile, $userWorkgroupsFile)
update_ps_users_and_groups.ps1:100:# Function to get all PlanningSpace workgroups
update_ps_users_and_groups.ps1:101:Function Get-PlanningSpaceWorkgroups($tenantUrl, $token)
update_ps_users_and_groups.ps1:108:# Function to get all PlanningSpace Windows AD users
update_ps_users_and_groups.ps1:109:Function Get-PlanningSpaceWindowsADUsers($tenantUrl, $token)
update_ps_users_and_groups.ps1:117:# Function to get workgroups from CSV file
update_ps_users_and_groups.ps1:118:Function Get-WorkgroupsFromCsv($workgroupsFile)
update_ps_users_and_groups.ps1:125:# Function to get users from CSV file
update_ps_users_and_groups.ps1:126:Function Get-UsersFromCsv($usersFile)
update_ps_users_and_groups.ps1:133:# Function to get user workgroups from CSV file
update_ps_users_and_groups.ps1:134:Function Get-UserWorkgroupsFromCsv($userWorkgroupsFile)
update_ps_users_and_groups.ps1:141:# Function that does the main processing for users
update_ps_users_and_groups.ps1:142:Function Process-Users($usersFromCsv, $currentUsers, $analyzeOnly, $tenantUrl)
update_ps_users_and_groups.ps1:270:# Function that does the main processing for workgroups
update_ps_users_and_groups.ps1:271:Function Process-Workgroups($workgroupsFromCsv, $currentWorkgroups, $analyzeOnly, $tenantUrl)
update_ps_users_and_groups.ps1:364:# Function that does the main processing for user workgroups
update_ps_users_and_groups.ps1:365:Function Process-UserWorkgroups($userWorkgroupsFromCsv, $currentWorkgroups, $currentUsers, $analyzeOnly, $tenantUrl)


